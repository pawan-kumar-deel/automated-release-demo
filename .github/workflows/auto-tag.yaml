name: Tag on Merge to Master

on:
  push:
    branches:
      - master

jobs:
  tag-on-merge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get the latest commit message
        run: echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Extract release branch name from commit message
        id: extract_branch_name
        run: |
          if [[ "${{ env.COMMIT_MESSAGE }}" =~ merge\ branch\ 'release/([^']+) ]]; then
            echo "RELEASE_BRANCH=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          else
            echo "RELEASE_BRANCH=unknown" >> $GITHUB_ENV
          fi

      - name: Get existing tags
        id: get_tags
        run: |
          TAG_PREFIX="${{ env.RELEASE_BRANCH }}"
          TAGS=$(git tag -l "${TAG_PREFIX}*")
          echo "TAGS=${TAGS}" >> $GITHUB_ENV

      - name: Determine new tag
        id: determine_tag
        run: |
          TAG_PREFIX="${{ env.RELEASE_BRANCH }}"
          TAGS="${{ env.TAGS }}"
          if [ -z "$TAG_PREFIX" ]; then
            echo "No release branch name found in commit message. Exiting."
            exit 1
          fi
          if [ -z "$TAGS" ]; then
            NEW_TAG="$TAG_PREFIX"
          else
            LAST_TAG=$(echo "$TAGS" | sort | tail -n 1)
            if [[ "$LAST_TAG" =~ ^${TAG_PREFIX}([a-z]?)$ ]]; then
              SUFFIX=${BASH_REMATCH[1]}
              if [ -z "$SUFFIX" ]; then
                NEW_TAG="${TAG_PREFIX}a"
              else
                NEXT_SUFFIX=$(echo "$SUFFIX" | tr "0-9a-y" "1-9a-z")
                NEW_TAG="${TAG_PREFIX}${NEXT_SUFFIX}"
              fi
            else
              echo "Unexpected tag format. Exiting."
              exit 1
            fi
          fi
          echo "NEW_TAG=${NEW_TAG}" >> $GITHUB_ENV

      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            const newTag = process.env.NEW_TAG;
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${newTag}`,
              sha: context.sha
            });
